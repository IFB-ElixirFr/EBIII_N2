knitr::opts_knit$set(echo = TRUE,  root.dir="~/Documents/GitHub/EBAII/2023/ebaiin2/chip-seq/", fig.path = "images/")
#knitr::opts_knit$set(echo = TRUE,  root.dir="/Users/elodiedarbo/Documents/enseignement/EBAII/2021/ebaiin2/chip-seq/", fig.path = "images/")
library(EnrichedHeatmap)
library(ggplot2)
library(ChIPpeakAnno)
library(ChIPseeker)
library(circlize)
library(rtracklayer)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene
library(org.Hs.eg.db)
knitr::opts_knit$set(echo = TRUE,  root.dir="~/Documents/GitHub/EBAII/2023/ebaiin2/chip-seq/", fig.path = "images/")
#knitr::opts_knit$set(echo = TRUE,  root.dir="/Users/elodiedarbo/Documents/enseignement/EBAII/2021/ebaiin2/chip-seq/", fig.path = "images/")
library(EnrichedHeatmap)
library(ggplot2)
library(ChIPpeakAnno)
library(ChIPseeker)
library(circlize)
library(rtracklayer)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene
library(org.Hs.eg.db)
align.stat <- read.table(paste0(params$chipseq, params$mapping.chipseq), sep="\t", quote="", header=T, check.names = F)
knitr::opts_knit$set(echo = TRUE,  root.dir="~/Documents/GitHub/EBAII/2023/ebaiin2/chip-seq/", fig.path = "images/")
#knitr::opts_knit$set(echo = TRUE,  root.dir="/Users/elodiedarbo/Documents/enseignement/EBAII/2021/ebaiin2/chip-seq/", fig.path = "images/")
library(EnrichedHeatmap)
library(ggplot2)
library(ChIPpeakAnno)
library(ChIPseeker)
library(circlize)
library(rtracklayer)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene
library(org.Hs.eg.db)
params <- list(chipseq = "~/lkhamvongsa/Documents/GitHub/EBAII/2023/ebaiin2/chip-seq/data/ChIPseq/",
mapping.chipseq= "stats_mappingChIPseq.tsv",
peakcalling.chipseq="stats_peakCalling.tsv",
brg1= "BRG1siCTRL_CHIP-seq_peaks.narrowPeak",
mitf= "MITF_CHIP-seq_peaks.narrowPeak",
sox10= "SOX10_CHIP-seq_peaks.narrowPeak",
brg1.bw= "BRG1siCTRL_CHIP-seq.bw",
mitf.bw= "MITF_CHIP-seq.bw",
sox10.bw= "SOX10_CHIP-seq.bw",
rnaseq= "~/lkhamvongsa/Documents/GitHub/EBAII/2023/ebaiin2/chip-seq/data/RNAseq/RNAseq_diff_norm.RData",
annot="~/lkhamvongsa/Documents/GitHub/EBAII/2023/ebaiin2/chip-seq/data/annot.Rdata"
)
align.stat <- read.table(paste0(params$chipseq, params$mapping.chipseq), sep="\t", quote="", header=T, check.names = F)
peak.stat <- read.table(paste0(params$chipseq,params$peakcalling.chipseq), sep="\t", quote="", header=T, check.names = F)
# load the library
library(rtracklayer)
# load the bw file for BRG1
cvg.BRG1 <- import(paste0(params$chipseq,params$brg1.bw),format="BigWig",
which=extended.5K.BRG1,
as="RleList")
knitr::opts_knit$set(echo = TRUE,  root.dir="~/Documents/GitHub/EBAII/2023/ebaiin2/chip-seq/", fig.path = "images/")
#knitr::opts_knit$set(echo = TRUE,  root.dir="/Users/elodiedarbo/Documents/enseignement/EBAII/2021/ebaiin2/chip-seq/", fig.path = "images/")
library(EnrichedHeatmap)
library(ggplot2)
library(ChIPpeakAnno)
library(ChIPseeker)
library(circlize)
library(rtracklayer)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene
library(org.Hs.eg.db)
align.stat <- read.table(paste0(params$chipseq, params$mapping.chipseq), sep="\t", quote="", header=T, check.names = F)
library(knitr)
align.stat = align.stat[order(align.stat$"Sample ID"),]
kable(align.stat, caption = "Mapping statistics of ChIP-seq data analyzed during this training session. Column \"Raw reads\" corresponds to the number of input reads. Column \"Aligned reads\" corresponds to the number of reads aligned exactly 1 time. Column \"Multimapped\" corresponds to the number of reads aligned > 1 times. Column \"Unmapped\" corresponds to the number of reads aligned 0 time.", row.names = FALSE)
peak.stat <- read.table(paste0(params$chipseq,params$peakcalling.chipseq), sep="\t", quote="", header=T, check.names = F)
peak.stat = peak.stat[order(peak.stat$"IP sample"),]
kable(peak.stat, caption = "Number of peaks detected", row.names = FALSE)
## The package ChIPseeker provides a function to load peak files such as narrowPeaks as GRanges objects
## Here BRG1 peak set is loaded into a list of peaks
## this list can be extended if there are more datasets
library(ChIPseeker)
peaks <- list()
peaks[["BRG1"]] <- readPeakFile(paste0(params$chipseq, params$brg1), as="GRanges")
peaks
# sapply() function takes list, vector or data frame as input and gives output in vector or matrix
# sapply apply the same function (here length) to all elements
# of the list "peaks"
sapply(peaks,length)
barplot(sapply(peaks,length))
# Load ggplot2 library
library(ggplot2)
# create a table with the data to display
peak.lengths <- data.frame(IP=names(peaks),
NbPeaks=sapply(peaks,length))
#
# make the barplot
ggplot(peak.lengths, aes(x=IP, y=NbPeaks)) +
geom_col()
# Let's add colors to the barplot
# In R it exists some already defined colors palettes
# the most widely used palette is RColorBrewer.
# This R library offers several color palettes
# See:
library(RColorBrewer)
par(mar=c(3,4,2,2))
display.brewer.all()
ggplot(peak.lengths, aes(x=IP, y=NbPeaks, fill=IP)) +
geom_col()
ggplot(peak.lengths, aes(x=IP, y=NbPeaks, fill=IP)) +
geom_col()+
scale_fill_brewer(palette="Set1")
## we use the function width() from GenomicRanges
library(GenomicRanges)
summary(width(peaks$BRG1))
# or quantile(width(peaks$BRG1))
peak.width <- lapply(peaks,width)
boxplot(peak.width)
# Load the package
library(reshape2)
peak.width.table <- melt(peak.width)
head(peak.width.table)
## create boxplot
ggplot(peak.width.table, aes(x=L1, y=value)) +
geom_boxplot()
# - theme_classic() change grey background to white background
# - fill=L1 and scale_fill_brewer(palette="Set1") colors boxplots
# based on chipped protein and with colors from RColorBrewer Set1 palette
# - labs changes x and y axis labels and legend title
# - scale_y_log10() set y axis to a log scale so that we can have a nice
# view of the data in small values
ggplot(peak.width.table, aes(x=L1, y=value, fill=L1)) +
geom_boxplot()+
theme_classic()+
scale_fill_brewer(palette="Set1")+
labs(x = "", y = "Peak sizes", fill = "TF")+
scale_y_log10()
## Select high quality peaks
peaks$BRG1 <- peaks$BRG1[peaks$BRG1$V9 >= 8]
## Compute the number of remaining peaks
length(peaks$BRG1)
# genome wide BRG1 peak distribution
covplot(peaks$BRG1, weightCol="V5")
# chromosome wide BRG1 peak distribution
covplot(peaks$BRG1, chrs=c("chr1", "chr2"), weightCol="V5")
## org.Hs.eg.db is an R object that contains mappings between Entrez Gene identifiers and GenBank accession numbers.
library(org.Hs.eg.db)
## Load transcript annotation
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene
## Annotate peaks for all datasets and store it in a list
## Here TSS regions are regions -1000Kb/+100b arount TSS positions
## Peak annotations are stored in a list
peakAnno <- list()
peakAnno[["BRG1"]] = annotatePeak(peaks$BRG1, tssRegion=c(-1000, 100), TxDb=txdb, annoDb="org.Hs.eg.db")
class(peakAnno$BRG1)
## Visualize and export annotation as a data table
# as.data.frame(peakAnno$BRG1)
head(as.data.frame(peakAnno$BRG1))
## distribution of genomic features for BRG1 peaks
# as a pie chart - which is the most widely used representation in publication
plotAnnoPie(peakAnno$BRG1)
# as a barplot
plotAnnoBar(peakAnno$BRG1)
library(UpSetR)
upsetplot(peakAnno$BRG1)
# Compute the center of the peaks and attribute it to a new
# column in the metadata of the BRG1 peak GRanges
peaks$BRG1$center.peak <- (start(peaks$BRG1) + end(peaks$BRG1))/2
# For computation and memory efficiency reasons,
# we subset the top 10K peaks according to the FDR column (V9)
top.10000 <- peaks$BRG1[order(peaks$BRG1$V9,decreasing=T)][1:10000]
# Generate peak center GRanges for the 10K top peaks
centers.BRG1 <- GRanges(seqnames(top.10000),
IRanges(start=top.10000$center.peak,
end=top.10000$center.peak))
# Extend each side of 2000 bp
#extended.2K.BRG1 <- resize(centers.BRG1, width = width(centers.BRG1)+4000, fix = "center")
# Lucie : rencontre des soucis avec getTagMatrix : Error in getTagMatrix(peaks$BRG1, windows = extended.2K.BRG1) :
#windows should be made from getPromoters()/getBioRegion()/makeBioRegionFromGranges()
extended.2K.BRG1 <- makeBioRegionFromGranges(centers.BRG1,by="peaks", type= "start_site", upstream = 2000, downstream = 2000)
## compute the density of peaks within the promoter regions
tagMatrix <- getTagMatrix(peaks$BRG1, windows=extended.2K.BRG1)
## plot the density
#tagHeatmap(tagMatrix, xlim=c(-2000, 2000), color="red")
tagHeatmap(tagMatrix)
# Extend from the peak center
#extended.5K.BRG1 <- resize(centers.BRG1, width = width(centers.BRG1)+10000, fix = "center")
#Lucie modif
extended.5K.BRG1 <- makeBioRegionFromGranges(centers.BRG1,by="peaks", type= "start_site", upstream = 5000, downstream = 5000)
## compute the density of peaks within the promoter regions
tagMatrix <- getTagMatrix(peaks$BRG1, windows=extended.5K.BRG1)
# Plot the profile
plotAvgProf(tagMatrix, xlim=c(-5000, 5000),
xlab="Distance to peak center", ylab = "Peak Count Frequency")
# # Generate peak center GRanges for all the peaks
centers.BRG1 <- GRanges(seqnames(peaks$BRG1),
IRanges(start=peaks$BRG1$center.peak,
end=peaks$BRG1$center.peak))
# Extend each side of 5000 bp
#extended.5K.BRG1 <- resize(centers.BRG1, width = width(centers.BRG1)+10000, fix = "center")
#Lucie modif
extended.5K.BRG1 <- makeBioRegionFromGranges(centers.BRG1,by="peaks", type= "start_site", upstream = 5000, downstream = 5000)
# load the library
library(rtracklayer)
# load the bw file for BRG1
cvg.BRG1 <- import(paste0(params$chipseq,params$brg1.bw),format="BigWig",
which=extended.5K.BRG1,
as="RleList")
# load the library
library(rtracklayer)
# load RNA-seq normalized expression data
load(params$rnaseq) # RNAseq
## Download GTF files
library(GenomicFeatures)
## Import BRG1 peaks annotated with Ensembl and Refseq annotation
load(params$annot)
